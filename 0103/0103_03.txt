1.35

Xの2乗がx＋１と等しいから・・・

gosh> (fixed-point (lambda (x) (average x (+ 1 (/ 1 x))))              
	                  1.0))
1.6180311591702674


1.3.6
(define (average x y)
    (/ (+ x y) 2))

(define (fixed-point2 f first-guess)
        (define (close-enough? v1 v2)
          (< (abs (- v1 v2) tolerance))
          (define (try guess)
            (let ((next (f guess)))
              (display next)
              (newline)
              (if (close-enough? guess next)
                next
                (try next))))
          (try first-guess))


(fixed-point2 (lambda (x) (/ (log 1000) (log x))) 1.5)
17.036620761802716
2.436284152826871
7.7573914048784065
3.3718636013068974
5.683217478018266
3.97564638093712
5.004940305230897
4.2893976408423535
4.743860707684508
4.437003894526853
4.6361416205906485
4.503444951269147
4.590350549476868
4.532777517802648
4.570631779772813
4.545618222336422
4.562092653795064
4.551218723744055
4.558385805707352
4.553657479516671
4.55677495241968
4.554718702465183
4.556074615314888
4.555180352768613
4.555770074687025
4.555381152108018
4.555637634081652
4.555468486740348
4.555580035270157
4.555506470667713
4.555554984963888
4.5555229906097905
4.555544090254035
4.555530175417048
4.555539351985717
4.555539351985717


平均緩和法だと・・
gosh> (fixed-point2 (lambda (x) (average x (/ (log 1000)  (log x)))) 1.5)
9.268310380901358
6.185343522487719
4.988133688461795
4.643254620420954
4.571101497091747
4.5582061760763715
4.555990975858476
4.555613236666653
4.555548906156018
4.555537952796512
4.555536087870658
4.555536087870658



1.37
a)
nとdを手続きとして、、、ってことは・・・

(define (cont-frac n d k)
  (let loop ((i 0))
	    (if (= i k)
			(/ (n i) (d i))
			(/ (n i) (+ (d i) (loop (+ i 1)))))))

k=5
gosh> (cont-frac (lambda (i) 1.0)
                 (lambda (i) 1.0)
                 5)
0.6153846153846154


k=10
(cont-frac (lambda (i) 1.0)
           (lambda (i) 1.0)
					 10)
0.6180555555555556


(define (cont-frac n d k)
   (define (iter i)
       (let ((Ni (n i))
            ((Di (d i)))
       (if (= i k)
          (/ Ni Di)
          (/ Ni (+ Di (iter (+ i 1))))))))
       (trace iter)
   (iter 1))

--------再度検討--------------------
(define (cont-trac  n d k)
    (define (iter i)
        (let ((Ni (n i))
             (Di (d i)))
        (if (= i k)
           (/ Ni Di)
           (/ Ni (+ Di (iter (+ i 1)))))))
        (trace iter)
    (iter 1))

F(x) = φ-1
(cont-frac (lambda(i) 1.0)
           (lambda(i) 1.0)
           10)
--------------------------------------

b)反復的にやるには・・・・
(define (cont-frac n d k)
  (let loop ((i k)
	     (result 0)) 
    (if (= i 0)
	result
	(loop (- i 1)
	      (/ (n i) (+ (d i) result))))))

こんな感じか？


1.38
(define (f k)
  (let-values (((q r) (quotient&remainder (+ k 1) 3)))
	    (if (= r 0)
			    (- (+ k 1) q)
           1)))


di = (define (dx i)
        (if (= (remainder i 3) 2)
				          (* (/ (+ i  1) 3) 2)
									          1))

これを換えてやる
(define (cont-frac k)
  (let loop ((i k)
	     (result 0)) 
    (if (= i 0)
	result
	(loop (- i 1)
	      (/ 1.0
         (+  
            (if (= (remainder i 3) 2)
                     (* (/ (+ i 1) 3) 2) 
                        1)
             result))))))


(define (cont-frac-e k)
  (+ 2 (cont-frac (lambda (i) 1.0)
                  (lambda (i)
                    (if (= (remainder i 3) 2)
                        (* (/ (+ i 1) 3) 2)
                        1))
                  k)))



gosh> (+ 2 (cont-frac (lambda (x) 1.0) f 100))



1.39
define (tan-cf x k)
  ;n を求める内部手続き
  (define (n k)
    (* x x -1)) ;x^? の項はマイナスなので -1 も同時に乗算しておく。
  ;d を求める内部手続き
  (define (d k)
    (+ 1 (* 2 k)))
  ;実際の呼び出し。
  ;全ての再帰演算が完了した直後は、分子の x も２乗されているのでそれを除算。
  ;更に -1 が係数として計算されているのでそれも一緒に除算。
  (/ (cont-frac n d k) x -1))

(define (cont-frac n d k)
  (define (iter i result)
    (let ((Ni (n i))
          (Di (d i)))
      (if (= i 0)
          result
          (iter (- i 1) (/ Ni (+ Di result))))))
  (iter k 0))

(define (contr-tan x k)
        (cont-frac (lambda(i)
                     (if (= i 1) x (- (* x x))))
                   (lambda(i)
                     (* (- (* 2 i) 1)))
                     
                   k))

---------------------------------


1.40
x^3 + a*x^2 + b*x + c = 0
ということだとすると

(define (cubic a b c)
  (lambda (x)
    (+ (* x x x)
       (* a x x) 
       (* b x)   
       c))) 



1.41
(define (double f)
    (lambda (x)
        (f (f x))))

(define (inc x)
     (+ x 1))

(((double (double double)) inc) 5 )
->21

(((double (lambda(x)
               (double (double x)))
   )
inc)
5)
->
(
 (
  (lambda (y)
    ((lambda (x)
          (double (double x)))
    ((lambda (x) (double (double x))) y)

  )
  )
  inc)
  5)
=>
y にincを適用させる
(
  (
   (lambda (x)
      (double (double x)))
    ((lambda (x) (double (double x))) inc)
  )
 5)
->

(( lambada(x)
    (double (double x)))
    (double (double inc)) 5)
->
(
  (double (double (double (double inc)))
 5)
->
ってことは5に16を加算するということになり、
[21]


------復習----------
1.42
((compose square inc) 6)
->49

(define (inc x) (+ x 1))
(define (square x) (* x x))

(define (compose f g)
  (lambda (x) (f (g x))))



1.43
(define (inc x) (+ x 1))
(define (square x) (* x x))

(define (my-compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (define (iter g m)
    (if (= m 1)
        g
        (iter (my-compose f g) (- m 1))))
  (iter f n))


1.44

(define dx 0.01)

(define (smooth f)
  (let ((prev (lambda (x) (f (- x dx))))
        (mid (lambda (x) (f x)))
        (next (lambda (x) (f (+ x dx)))))
  (lambda (x) (/ (+ (prev x) (mid x) (next x)) 3.0))))

;合っている気がする
((smooth (lambda (x) (* x x))) 3)

1.45
問題の意味としては、
y -> x/y  平均緩和1回
y -> x^2/y 平均緩和1回
y -> x^3/y 平均緩和2回

平均緩和
y = f(y) y<<<不動点

y = ((y + f(y) /2)

上の式は次のような形のはず
(define (average-dump f)
     (lambda (y)
		    (/ (+ y (f y)) 2)
				))


(define (n-root n k x)
    fixed_point ([K回適用] ,[n乗根を求めたい], 1.0))

(define (beki x n)
  (if (= n 1)
	   x
		 (* x (beki x (- n 1)))))



(define (n-root n k x)
  (fixed_point (repeated (average-ddump k) 
	              ,lambda(y) 
							   (/ x (beki x n))  	
								, 1.0)))

※：n乗根を求める



^^^^^^^^^使う定義^^^^^^^^^^^^^^
(define (inc x) (+ x 1))
(define (square x) (* x x))

(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (define (iter g m)
    (if (= m 1)
        g
        (iter (compose f g) (- m 1))))
  (iter f n))


(define (average x y)
    (/ (+ x y) 2))

(define (close-enough? x y)
  (< (abs (- x y)) 0.001))

(define (fixed-point f first-guess)
        (define (close-enough? v1 v2)
          (< (abs (- v1 v2) tolerance))
          (define (try guess)
            (let ((next (f guess)))
              (display next)
              (newline)
              (if (close-enough? guess next)
                next
                (try next))))
          (try first-guess)))

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1.46
反復改良法（iterative-improvement）
最初に設定した予測値が適切な誤差範囲であれば、OKだけど、不十分だったらその予測値を改良してそれが適切かみる。

iterative-improve は「引数として予測値をとり、予測値が十分良好になるまで改良を繰り返す手続き」を値として返す。

→引数は予測値？

(define (iterative-improve guess f)
  [予測値が十分良好になるまで改善を繰り返す手続き]
)

=>

(define (iterative-improve close-enough? improve guess)
  (define (iter-improve first-guess)
        (if (close-enough?  first-guess)
          first-guess
         (iter-improve (improve first-guess) )))
  (iter-improve guess))



・sqrt
まだ未検証だけど。。。
(define (sqrt x)
  (define (close-enough? guess)
    (< (abs (- (* guess guess) x)) 0.00001))
  (define (improve guess)
     (/ (+  guess (/ x guess)) 2))
(iterative-improve close-enough? improve 1.0))

->
(sqrt 16)
(sqrt 100)
動いてそうだ


・fixed_point
(define (fixed-point f first-guess)
  ;精度チェック手続き
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2) ) 0.00001))
  ;改良手続き
  (define (improve guess)
    (f guess))
  ;反復改良法を使う
  (iterative-improve close-enough? improve 1.0))



