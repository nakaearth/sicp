
：
http://swatmac.info/?tag=sicp&paged=4
http://community.schemewiki.org/?SICP-Solutions


1.3 高階手続きによる抽象

(define (sum-integers a b)
  (if (> a b)
	    0
			(+ a (sum-integers (+ a 1) b))))


(define (sum-cubes a b)
   (if (> a b)
	     0
			 (+ (cube a) (sum-cubes (+ a 1) b))))

(define (pi-sum a b)
  (if (> a b)
	   0
		 (+ (/ 1.0 (* a (+ a 2))) (pi-sum (+ a 4) b))))


総和
(define (sum term a next b)
  (if (> a b)
	     0
			(+ (term a)
			   (sum term (next a) next b))))

(define (inc n) (+ n 1))
(define (sum-cubes a b)
        (sum cube a inc b))

(define (identity x) x)
(define (sum-integers a b)
  (sum identity a in b))


1.29
P(X) = f(a)((x -m)(x -b))/((a -m)(a -b)) + f(m)((x -a)(x-b))/((m -a )(m -b)) + f(b)((x-a)(x-b))/((b -a)(b -m))



1.30
 (define (sum term a next b) 
  (define (iter a result) 
          (if (> a b) 
              result 
              (iter (next a) (+ result (term a))))) 
  (iter a 0)) 

1.31
a.
(define (product term a next b)
    (if (> a  b)
     1
    (* (term a) (product term (next a) next b)))


πの計算は・・・
 (define (pi-term n) 
   (if (even? n) 
       (/ (+ n 2) (+ n 1)) 
       (/ (+ n 1) (+ n 2)))) 

b.
(define (product term a next b)
    (define (iter a result)
        (if (> a b)
          result
        (iter (next a) (* (term a) result))))
    (iter a 1))

1.32
アキュムレータ関数：前の値を使って値を増幅させる
a.
(accumulate combiner null-value term a next b)
-> 
(define (accumulate combiner null-value term a next b)
       (if (> a b) null-value
        (combiner (term a) (accumulate combiner null-value term (next a) next b)))) 


(define (sum  term a next b)
   (accumulate + 0 term a next b)
	 )


b.
      
(define (accumulate combiner null-value term a next b)
        (define (iter  a result)
				  (if (> a b) 1)
					(iter (next a) (combiner result (next a))))

        (iter a null-value))

1.33
a


b

--------------------------------------------------------------
1.3.2 lambdaを使う手続き




1.34
(define (f g)
 (g 2))

 (f square)
 4

 (f (lambda (z) (* z (+ z 1))))
 6



区間二分法
(define (close-enough? x y)
        (< (abs (- x y)) 0.001))

(define (search f neg-point pos-point) 
    (let ((midpoint (average neg-point pos-point)))
      (if (close-enough? neg-point pos-point)
			midpoint
			(let ((test-value (f midpoint)))
			  (cond ((positive? test-value)
				       (search f neg-point midpoint))
							((negative? test-value)
							 (search f midpoint pos-point))
							 (else midpoint))))))

不動点



	
