2.2 階層データ構造と閉

(cons 1 (cons 2 (cons 3 (cons 4 nil))))

これは
(list 1 2 3 4) と同じ

$ (define one-through-four (list 1 2 3 4))
$ one-through-four
=> (1 2 3 4)

(car one-through-four)
1

(cdr one-through-four)
(2 3 4)

(car (cdr one-through-four))
2

(cons 10 one-through-four))


gosh> (cons 5 one-through-four)
(5 1 2 3 4)

■リスト演算
(define (list-ref items n)
  (if (= n 0)
	   (car items)
		 (list-ref (cdr items) (- n 1))))

(define squares (list 1 4 9 16 25))

(list-ref squares 3)
16

(define (length items)
  (if (null? items)
    0
    (+ 1 (length (cdr items)))))
			length

(length squares)
5

gosh> (length odds)
4
gosh> (define (append list1 list2)
        (if (null? list1)
          list2
          (cons (car list1) (append (cdr list1) list2))))
append
gosh> (append squares odds)
(1 4 9 16 25 1 3 5 7)

(Q2.17)
(last-pair (list 23 72 149 34))


gosh> (define (length items)
        (if (null? items)
          0
          (+ 1 (length (cdr items)))))
length
gosh> (define (last-pair list1)
        (if (= (length list1) 2)
          (cdr list1)
          (last-pair (cdr list1))))
last-pair
gosh> (last-pair (list 1 2 3 4))
(4)

(define (last-pair list1)
  (if (= (length list1) 1)
    (list (car list1)))
    (last-pair (cdr list1)))

last-pair


(last-pair (list 1 2 3))
(3)

> (define (last-pair list1)
        (if (= (length list1) 1)
          list1
          (last-pair (cdr list1))))
last-pair
> (last-pair (list 1 2 3))
(3)
> (last-pair (list 1))
(1)

(Q2.18)

(reverse (list 1 4 9 16 25))

(define (reverse list1)
  (define (r-iter rlist list2)
  (if  (null? list2) 
    rlist
  (r-iter (cons (car list2) rlist) (cdr list2))))
	(r-iter (list ) list1))


(Q2.19)

1.2.2の22ページ両替の計算を確認すると。そこに定義されているccに注目する。
ここではamountが丁度0なら1を
　　　　amountが0よりすくなければ、0を
　　　　amountがコインの種類が0ならば両替の数も0。
これを再帰的に繰り返している。


(define us-coins (list 50 25 10 5 1))

(define uk-coins (list 100 50 20 10 5 2 1 0.5))

与えられた金額を両替するのに、どのくらいの場合の数があるかを計算する処理

(cc 100 us-coins)

(define (cc amount coin-values)
 (cond ((= amount 0) 1)
   ( (or (< 	amount 0) (no-more? coin-values) ) 0)
 (else
   (+ (cc amount
         (except-first-denomination coin-values))
      (cc (- amount
             (first-denomination coin-values))
          coin-values) ) ) ) )


(define (first-denomination coin-values)
    (car coin-values)
)


(define (except-first-denomination coin-values)
  (cdr  coin-values)
)

(define (no-more? coin-values) 
  (null? coin-values)
)

gosh> (cc 100 us-coins)
292
gosh> (cc 50 us-coins)
50
gosh> (cc 10 us-coins)
4
gosh> (cc 20 us-coins)
9


(Q2.20)
(define (f x y . z
  z  
)

(f 1 2 3 4 5)

osh> (define (f x y . z) z)
f
gosh> (f 1 2 3 4 5)
(3 4 5)

以下のようになるsame-parity は何か？
(same-parity 1 2 3 4 5 6 7)
-> (1 3 5 7)

(same-parity 2 3 4 5 6)
-> (2 4 6)

(define (even-parity y)
 (define (e-iter elist olist)
   (if (null? olist)
	 elist
   (if (= (mod (car olist) 2) 0)
      (e-iter (append elist (list (car olist))) (cdr olist))
      (e-iter elist (cdr olist))) 
   )
 )
 (e-iter (list  )  y)
)

(define (odd-parity  z)
 (define (o-iter odlist olist)
   (if (null? olist)
	 odlist
   (if (= (mod (car olist) 2) 1)
     (o-iter (append odlist (list (car olist))) (cdr olist))
     (o-iter odlist (cdr olist)))) 
 )
 (o-iter (list ) z)
)

(define (same-parity . x)
  (if (= (mod (car x) 2) 0)
    (even-parity x)
    (odd-parity x))
)

gosh> (same-parity 1 2 4 5 6 7)
(1 5 7)
gosh> (same-parity 2 3 4 5 6)
(2 4 6)

