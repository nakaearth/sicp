2.2 階層データ構造と閉

(cons 1 (cons 2 (cons 3 (cons 4 nil))))

これは
(list 1 2 3 4) と同じ

$ (define one-through-four (list 1 2 3 4))
$ one-through-four
=> (1 2 3 4)

(car one-through-four)
1

(cdr one-through-four)
(2 3 4)

(car (cdr one-through-four))
2

(cons 10 one-through-four))


gosh> (cons 5 one-through-four)
(5 1 2 3 4)

■リスト演算
(define (list-ref items n)
  (if (= n 0)
	   (car items)
		 (list-ref (cdr items) (- n 1))))

(define squares (list 1 4 9 16 25))

(list-ref squares 3)
16

(define (length items)
  (if (null? items)
    0
    (+ 1 (length (cdr items)))))
			length

(length squares)
5

gosh> (length odds)
4
gosh> (define (append list1 list2)
        (if (null? list1)
          list2
          (cons (car list1) (append (cdr list1) list2))))
append
gosh> (append squares odds)
(1 4 9 16 25 1 3 5 7)

(Q2.17)
(last-pair (list 23 72 149 34))


gosh> (define (length items)
        (if (null? items)
          0
          (+ 1 (length (cdr items)))))
length
gosh> (define (last-pair list1)
        (if (= (length list1) 2)
          (cdr list1)
          (last-pair (cdr list1))))
last-pair
gosh> (last-pair (list 1 2 3 4))
(4)

(define (last-pair list1)
  (if (= (length list1) 1)
    (list (car list1)))
    (last-pair (cdr list1)))

last-pair


(last-pair (list 1 2 3))
(3)

> (define (last-pair list1)
        (if (= (length list1) 1)
          (list (car list1))
          (last-pair (cdr list1))))
last-pair
> (last-pair (list 1 2 3))
(3)
> (last-pair (list 1))
(1)


