2.2.2 階層構造

(cons (list 1 2) (list 3 4))


(define x (cons (list 1 2)(list 3 4)))

gosh> (define (count-leaves x)
        (cond ((null? x) 0)
          ((not (pair? x)) 1)
          (else (+ (count-leaves (car x))
                   (count-leaves (cdr x))))))
count-leaves
gosh> (count-leaves x)
4


(Q2.24)
(list 1 (list 2 (list 3 4)))

(1 (2 (3 4)))

1   (2 (3 4))
        |      
      2   (3 4)
            |
           3 4
