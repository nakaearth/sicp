2.2.2 階層構造

(cons (list 1 2) (list 3 4))


(define x (cons (list 1 2)(list 3 4)))

gosh> (define (count-leaves x)
        (cond ((null? x) 0)
          ((not (pair? x)) 1)
          (else (+ (count-leaves (car x))
                   (count-leaves (cdr x))))))
count-leaves
gosh> (count-leaves x)
4


(Q2.24)
(list 1 (list 2 (list 3 4)))

(1 (2 (3 4)))

1   (2 (3 4))
        |      
      2   (3 4)
            |
           3 4



(Q2.25)




(Q2.26)
gosh> (define x (list 1 2 3))
x
gosh> (define y (list 4 5 6))
y
gosh> (append x y)
(1 2 3 4 5 6)
gosh> (cons x y)
((1 2 3) 4 5 6)
gosh> (list x y)
((1 2 3) (4 5 6))
gosh> 

(Q2.27)
(define x (list (list 1 2) (list 3 4)))


(define (reverse list1)
  (define (r-iter rlist list2)
    (if  (null? list2) 
     rlist
     (r-iter (cons (car list2) rlist) (cdr list2))))
  (r-iter (list ) list1))

(reverse x)

> (reverse x)
((3 4) (1 2))

(define (deep-reverse list1)
  (define (r-iter rlist list2)
    (if  (null? list2) 
     rlist
     (r-iter (cons
             (if  pair? (car list2))
						   (r-iter( () (car list2))
               rList))
             (cdr list2))))
  (r-iter (list ) list1))

    
(Q2.28)
(define x (list (list 1 2) (list 3 4)))

(fringe x)
(1234)

(define (fringe list1)
  (define (f-iter f-list list2)
    (if (null? list2)
      f-list
     (f-iter (append  f-list (car list2)) (cdr list2))))
   (append (f-iter (list ) list1)))

gosh> (fringe x)
(1 2 3 4)
gosh> (fringe (list x x))
((1 2) (3 4) (1 2) (3 4))

(define (fringe list1)
  (define (f-iter f-list list2)
    (cond ((null? list2) f-list)
      ( (not (pair? list2)) (append f-list list2))
      (else 
     (f-iter (append  f-list (car list2)) (cdr list2)))))
   (append (f-iter (list ) list1)))



(Q2.29)
(define (make-mobile left right)
  (list left right))

(define (make-branch length structure)
  (list length structure))

a.
(define (left-branch list1))

b. 


c.


d.



木の写像
(define (scale-tree tree factor)
  (cond ((null? tree) nil)
     ((not (pair?	tree)) (* tree factor))
     (else (cons (scale-tree (car tree) factor)
                 (scale-tree (cdr tree) factor)))))

(Q2.30)
(define (square-list tree)
  (cond ((null? tree) () )
    ((not (pair? tree)) (* tree tree))
    (else (cons (square-list (car tree))
                (square-list (cdr tree)))))) 

(Q2.31)
(define (square-tree tree) (tree-map square tree))


(define (tree-map square tree)
  (cond ((null? tree) nil)
     ((not (pair? tree)) (square tree))
		 (else (cons tree-map (car tree))
		        (square-list (cdr tree)))
     ))

