■データによる抽象と構築
データオブジェクトを組み合わせ、合成データを使って抽象を構築する

何故言語に合成データが必要か
・プログラム設計の思考レベルを高めるため
・設計の部品化力を増やすため
・プログラム言語の表現力を広めるため

->言語の持つ基本的データオブジェクトをより高いレベルの思考で扱える

例として「有理数」で算術演算するシステムを設計すると場合を考える
※有理数（ゆうりすう、rational number）とは、二つの整数 a, b （ただし b は 0 でない）をもちいて a/b という分数で表せる数

ax+by という計算処理を例に上げて説明してる。
(define (linear-combination a b x y)
    (+ ( * a x) (* b y)))

これを抽象的にかくと
(define (linear-combination a b x y)
 (add (mul a x) (mul b y)))

データの種類によってaddやmulの処理内容が変わる。linear-combinationからみてaddやmulが適切に実行されていればよい
この章で学ぶ重要なことの一つが
  closure
	公認インターフェース

言語表現
  記号式
	
汎用演算

データ主導プログラミング

以降では有理数を例にして説明する

2.1 データ抽象入門
プログラムを合成データオブジェク ト を使うように構成しう「抽象データ」を操作出来る ようにすること　
プログラムはデータを,当面の仕事を実行するのに本当に必要ではないデータについては, 何も仮定しないように使うべきである
同時に「具体的なデータ表現は, データを使うプログラムから独立に定義すべき である. 
->この2つの部分のインターフェースは選択子(selectors) とか構成子(constructors) と いう

抽象データ：選択子
具体的なデータ表現：構成子

2.1.1
 (make-rat (n)(d)) は分子が整数(n), 分母 が整数(d) の有理数を返す.
 (numer(x)) 有理数(x) の分子を返す
 (denom(x)) 有理数(x) の分母 を返す.

強力な合成の戦略. 希望的思考 (wishful thinking) を使って有理数を表現
上記三つの手続きがあれば、

足し算、引き算、かけ算、割り算を定義できる。


(define (add-rat x y)
 (make-rat (+ (* (numer x) (denom y))
   (* (numer y) (denom x)))
(* (denom x) (denom y))))


(define (sub-rat x y)
 (make-rat (- (* (numer x) (denom y))
   (* (numer y) (denom x)))
(* (denom x) (denom y))))

(define (mul-rat x y)
 (make-rat (* (numer x) (numer y))
 (* (denom x) (denom y))))


・対
gosh> (define x (cons 1 2))
x
gosh> (define y (cons 3 4))
y
gosh> (define z (cons x y))
z
gosh> (car z)
(1 . 2)
gosh> (cdr z)
(3 . 4)


・有理数
(define (make-rat n d) (cons n d))

(define (number x) (car x))
(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
	(display (numer x))
	(display "/")
	(display (denom x)))

(define one-half (make-rat 1 2))
(define one-third (make 1 3))

(print-rat (add-rat one-half one-third))
(print-rat (mul-rat one-half one-third))
(print-rat (add-rat one-third one-third))


